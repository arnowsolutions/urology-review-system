{
    "name": "urological-review-backend",
    "version": "1.0.0",
    "description": "Backend server for Urological Review System",
    "main": "dist/server.js",
    "scripts": {
        "build": "tsc",
        "start": "node dist/server.js",
        "dev": "nodemon --exec ts-node src/server.ts",
        "dev:vercel": "vercel dev",
        "deploy": "vercel --prod",
        "migrate": "echo 'Database migration: Copy and run the CREATE statements from src/database/schema.sql in your Supabase SQL editor'",
        "vercel-build": "echo 'Vercel build step - TypeScript compilation handled by Vercel'",
        "db:setup": "ts-node src/scripts/setup-database.ts",
        "db:seed": "ts-node src/utils/dataSeeder.ts",
        "db:reset": "echo 'WARNING: This will reset all database data. Run the DROP statements from schema.sql in Supabase SQL editor, then run npm run db:setup'",
        "db:migrate": "echo 'Database migration: Copy and run the CREATE statements from src/database/schema.sql in your Supabase SQL editor'",
        "db:backup": "echo 'Database backup: Use Supabase dashboard to create database backups under Settings > Database > Backups'",
        "test:connection": "ts-node test-connection.ts",
        "test:connection:vercel": "vercel env pull .env && ts-node test-connection.ts",
        "test:connection:vercel:prod": "vercel env pull .env -e production && ts-node test-connection.ts",
        "test:connection:vercel:preview": "vercel env pull .env -e preview && ts-node test-connection.ts",
        "env:check": "node -e \"const req = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'SUPABASE_SERVICE_ROLE_KEY']; const missing = req.filter(k => !process.env[k]); if(missing.length) { console.error('❌ Missing environment variables:', missing.join(', ')); process.exit(1); } else { console.log('✅ All required environment variables are set'); }\"",
        "test:cors": "ts-node -e \"import('./src/utils/apiTester').then(m => m.generateCorsTestReport('http://localhost:3001').then(r => m.logCorsTestReport(r)))\"",
        "test:api:routing": "ts-node -e \"import('./src/utils/apiTester').then(m => m.validateApiRouting('http://localhost:3001').then(r => console.log('API Routing Validation:', r)))\"",
        "test:cross-origin": "ts-node -e \"import('./src/utils/apiTester').then(m => m.testCrossOriginRequests('http://localhost:3001', 'http://localhost:3000').then(r => console.log('Cross-Origin Test:', r)))\"",
        "debug:cors": "ts-node -e \"import('./src/utils/corsConfig').then(m => m.logCorsConfiguration())\"",
        "validate:env": "ts-node -e \"import('./src/utils/environmentDetector').then(m => { const v = m.validateEnvironment(); console.log('Environment Validation:', v); if(!v.isValid) process.exit(1); })\""
    },
    "dependencies": {
        "@supabase/supabase-js": "^2.39.0",
        "cors": "^2.8.5",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "uuid": "^9.0.0"
    },
    "devDependencies": {
        "@types/cors": "^2.8.19",
        "@types/express": "^4.17.17",
        "@types/node": "^20.4.5",
        "@vercel/node": "^5.3.24",
        "nodemon": "^3.0.1",
        "ts-node": "^10.9.1",
        "typescript": "^5.1.6"
    },
    "keywords": [
        "express",
        "typescript",
        "supabase",
        "review-system"
    ],
    "author": "",
    "license": "ISC"
}